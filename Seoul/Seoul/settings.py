"""
Django settings for Seoul project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from django.conf.global_settings import SESSION_EXPIRE_AT_BROWSER_CLOSE,\
    MEDIA_URL, MEDIA_ROOT
from django.contrib.messages import constants as messages_constants
import json
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# COOKIE를 SESSION으로 사용하게 설정
SESSION_EXPIRE_AT_BROWSER_CLOSE = True


import os
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")    #저장경로 지정

MESSAGE_LEVEL = messages_constants.DEBUG


# ACCOUNT_FORMS = {'signup':'member.forms.MyCustomSignupForm',}

# logging
# logger.debug()
# logger.info()
# logger.warning()
# logger.error()
# logger.critical()
LOGGING = {
    "version" : 1,
    "disable_existing_loggers" : False,
    "formatters" : {
        "format1" : {
                "format" : "%(message)s",
                "datefmt" : "%Y-%m-%d %H:%M:%S",
            },
        "format2" : {
                "format" : "%(levelname)s %(message)s",
            },
        "format3" : {
                "format" : "%(message)s",
            },
        },
    "handlers" : {
        "file1" : {
            "level" : "INFO",
            "class" : "logging.handlers.RotatingFileHandler",
            "filename" : os.path.join(BASE_DIR, "log/logfile1.log"),
            "encoding" : "UTF-8",
            "maxBytes" : 1024 * 1024 * 5,
            "backupCount" : 3,
            "formatter" : "format1",
            },
        "file2" : {
            "level" : "INFO",
            "class" : "logging.handlers.RotatingFileHandler",
            "filename" : os.path.join(BASE_DIR, "log/logfile2.log"),
            "encoding" : "UTF-8",
            "maxBytes" : 1024 * 1024 * 5,
            "backupCount" : 3,
            "formatter" : "format1",
            },
        "file3" : {
            "level" : "INFO",
            "class" : "logging.handlers.RotatingFileHandler",
            "filename" : os.path.join(BASE_DIR, "log/logfile3.log"),
            "encoding" : "UTF-8",
            "maxBytes" : 1024 * 1024 * 5,
            "backupCount" : 3,
            "formatter" : "format1",
            },
        "file4" : {
            "level" : "INFO",
            "class" : "logging.handlers.RotatingFileHandler",
            "filename" : os.path.join(BASE_DIR, "log/logfile4.log"),
            "encoding" : "UTF-8",
            "maxBytes" : 1024 * 1024 * 5,
            "backupCount" : 3,
            "formatter" : "format3",
            },
        "console" : {
            "level" : "DEBUG",
            "class" : "logging.StreamHandler",
            "formatter" : "format2",
            },                
        },
    "loggers" : {
        "django" : {
            "handlers" : ["console"],
            "propagate" : True,
            "level" : "WARNING",
            },
        "django.request" : {
            "handlers" : ["console"],
            "propagate" : True,
            "level" : "WARNING",
            },
        "member" : {
            "handlers" : ["file1"],
            "propagate" : True,
            "level" : "INFO",
            },
        "board" : {
            "handlers" : ["file2"],
            "propagate" : True,
            "level" : "INFO",
            },
        "plan" : {
            "handlers" : ["file3"],
            "propagate" : True,
            "level" : "INFO",
            },
        "main" : {
            "handlers" : ["file1"],
            "propagate" : True,
            "level" : "INFO",
            },
        },
    }

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_4$(u@j&a%7piw9^5+(hzp6%&tyh=bf_-(40uzrl87!_3e(dw='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost", "127.0.0.1", "192.168.1.25", "192.168.56.102", "192.168.56.103", "master", "www.filmal.net"]


# Application definition

SITE_ID = 1

LOGIN_REDIRECT_URL = '/'

ACCOUNT_LOGOUT_ON_GET = True

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mathfilters',
    'main',
    'plan',
    'member',
    'board',
    'population',
    'recom',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.naver',
    'allauth.socialaccount.providers.kakao',
    'allauth.socialaccount.providers.google',
]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile', 
            'email', #저는 email 주소 정보도 받아오고 싶어서 추가해줬습니다
            
        ],
        'AUTH_PARAMS': {
            'access_type': 'online'
        }
    }
}

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Seoul.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), os.path.join(BASE_DIR, 'templates', 'accounts')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Seoul.wsgi.application'



# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'seoul',
        'USER': 'admin',
        'PASSWORD': 'admin1234',
        'HOST': 'sample-db.cuy0rgqhle4s.ap-northeast-2.rds.amazonaws.com',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#카카오로그인
secret_file = os.path.join(BASE_DIR, 'secrets.json')
with open(secret_file) as f:
    secrets = json.loads(f.read())

def get_secret(setting, secrets=secrets):
    try:
        return secrets[setting]
    except KeyError:
        error_msg : "Set the {0} environment viriable".format(setting)
        raise ImproperlyConfigured(error_msg)

SECRET_KEY = get_secret("SECRET_KEY")
